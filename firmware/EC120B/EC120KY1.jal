------------------------------------------------------------------------------------------------------------------------
-- Copyright (c) 2015, SimMeters.com
-- All rights reserved. Released under the BSD license.
-- EC120KY1.jal 1.0 01/01/2015 (EC120B COMM Radio)

-- Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
-- following conditions are met:

-- 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
-- following disclaimer.

-- 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
-- following disclaimer in the documentation and/or other materials provided with the distribution.

-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
-- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-- SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-- WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
-- USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
------------------------------------------------------------------------------------------------------------------------
include atachapters     -- Constants for ATA Chapters
include canaerospace    -- Constants for CANAerospace
include lru0000         -- Include For LRU Device Type
include canbus          -- CanBus Library
include objects         -- Objects Library
include spidisplay      -- Library for Display

------------------------------------------------------------------------------------------------------------------------
-- Initialization
------------------------------------------------------------------------------------------------------------------------
_usec_delay(1000000)

setup_can_init()
add_can_rxfilter(id_request_bootloader)
add_can_rxfilter(id_vhf_1_com_frequency) -- COM_ACT
add_can_rxfilter(id_vhf_3_com_frequency) -- COM_SBY
setup_can_end()

spi_enable(3)

set_pin(P35, high) -- left display
set_pin(P36, high) -- right display

spi_clear_screen(p35)
spi_set_font(p35, 200)
spi_print_string(p35, 0, 1, "000.00")

spi_clear_screen(p36)
spi_set_font(p36, 200)
spi_print_string(p36, 0, 1, "000.00")

set_pin(P21, high)  -- set green led on
set_pin(P22, low)   -- set red led off

------------------------------------------------------------------------------------------------------------------------
-- Objects Definition
------------------------------------------------------------------------------------------------------------------------
var can_frame cf
var dword com_act = 0
var dword com_act_latch = 0
var dword com_sby = 0
var dword com_sby_latch = 0

var volatile en2p en00 = new_en2p(p05, p06, COM1_KHZ_DEC, COM1_KHZ_INC)                         -- encoder
var volatile en2p en01 = new_en2p(p07, p08, COM1_MHZ_DEC, COM1_MHZ_INC)                         -- encoder
var volatile sw2p sw00 = new_sw2p(p09, P19, COM1_PUSH_K_ON, COM1_PUSH_K_OFF)                    -- switch encoder
var volatile sw2p sw01 = new_sw2p(p10, P19, COM1_ACT_SBY_TOGGLE_ON, COM1_ACT_SBY_TOGGLE_OFF)    -- switch sby - act
var volatile sw2p sw02 = new_sw2p(p11, P19, COM1_CHANNEL_ON, COM1_CHANNEL_OFF)                  -- switch chan
-- var volatile pot  pt00 = new_pot (p18, COMM1_VOLUME)                                            -- pot 

------------------------------------------------------------------------------------------------------------------------
-- Process encoders
------------------------------------------------------------------------------------------------------------------------
isr_encoder_enable() -- because we use encoders
procedure isr_encoder_process() is pragma interrupt

    if (INTCON_TMR0IF) then
        
		process_en2p(en00)
        process_en2p(en01)
        isr_encoder_reset()
    
	end if

end procedure

------------------------------------------------------------------------------------------------------------------------
-- Main Loop
------------------------------------------------------------------------------------------------------------------------
forever loop 

    -- request bootloader for auto update (do not remove)
    request_bootloader("EC120KY1")

    -- process devices from canbus
    cf = get_can_frame(id_vhf_1_com_frequency)
    if(cf.dlc > 0) then

        com_act = dword(get_can_float(cf) * float(1))
        if(com_act != com_act_latch) then

            spi_clear_screen(p35)
            spi_set_font(p35, 200)
            spi_print_mhz(p35, 0, 1, com_act)
            com_act_latch = com_act

        end if

    end if

    cf = get_can_frame(id_vhf_3_com_frequency)
    if(cf.dlc > 0) then

        com_sby = dword(get_can_float(cf) * float(1))
        if(com_sby != com_sby_latch) then
            spi_clear_screen(p36)
            spi_set_font(p36, 200)
            spi_print_mhz(p36,0,1,com_sby)
            com_sby_latch = com_sby
        end if

    end if

    -- process devices
    process_sw2p(sw00)
    process_sw2p(sw01)
    process_sw2p(sw02)
    -- process_pot(pt00)

end loop