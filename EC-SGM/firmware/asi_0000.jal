------------------------------------------------------------------------------------------------------------------------
-- Copyright (c) 2015, SimMeters
-- All rights reserved. Released under the BSD license.
-- asi_0000.jal 1.0 01/01/2015 (Digital / Analog Airspeed - Mach Indicator 0-1000 Knots)

-- Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
-- following conditions are met:

-- 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the
-- following disclaimer.

-- 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
-- following disclaimer in the documentation and/or other materials provided with the distribution.

-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
-- INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
-- SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
-- WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
-- USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
------------------------------------------------------------------------------------------------------------------------
include atachapters     -- Library constants ATA Chapters
include canaerospace    -- Constants for CANAerospace
include lru0180         -- Include For LRU Gauge Device Type
include canbus          -- CanBus Library
include sgcdisplay      -- 4DSystems Display Library

------------------------------------------------------------------------------------------------------------------------
-- Variables Declaration
------------------------------------------------------------------------------------------------------------------------
var can_frame 	cf
var dword 		lamps_0_31
var float 		mac   = 0.0
var dword 		vmac  = 0
var dword 		vmacl = 0
var float 		asi   = 0.0

------------------------------------------------------------------------------------------------------------------------
-- Initialization
------------------------------------------------------------------------------------------------------------------------
_usec_delay(1000000)

led_l = on
led_r = on

LATC_LATC4 = low
_usec_delay(100000)
LATC_LATC4 = high
_usec_delay(1000000)

usart_enable()
set_autobaud()
clear_screen()

print_mach (0x05, 0x05, 0x02, 0xFF, 0xFF, dword(mac))
print_asi  (0x05, 0x06, 0x01, 0xFF, 0xFF, dword(asi))

srca = 0
dsta = 7680
set_vid2905()

srca = 7680
dsta = 0
set_vid2905()

srca = 0
dsta = 0

setup_can_init()
add_can_rxfilter(id_request_bootloader)
add_can_rxfilter(id_lamps_0_31)
add_can_rxfilter(id_mach_number)
add_can_rxfilter(id_indicated_airspeed)
setup_can_end()

led_l = off
led_r = off

------------------------------------------------------------------------------------------------------------------------
-- Main Loop
------------------------------------------------------------------------------------------------------------------------
forever loop 
    
    opaque_text(true)
    request_bootloader("asi_0000")

    cf = get_can_frame(id_lamps_0_31)
    if(cf.dlc > 0) then
    
        lamps_0_31 = get_can_uint32(cf)
		var byte bdata[4] at lamps_0_31

		led_l = byte(bdata[0] & 0b00000001)
        led_r = byte(bdata[0] & 0b00000001) 
    
    end if

    cf = get_can_frame(id_mach_number)
    if(cf.dlc > 0) then

         mac = get_can_float(cf) * float(100)
         vmac = dword(mac)

         if(vmac != vmacl) then

			vmacl = vmac
            print_mach(0x05, 0x05, 0x01, 0xFF, 0xFF, vmac)
         
		 end if

    end if    
    
	cf = get_can_frame(id_indicated_airspeed)
    if(cf.dlc > 0) then
    
        asi = get_can_float(cf) * float(1.94384) -- ms to knots

        if (asi >= float(0) & asi <= float(1000)) then
        
            dsta = dword(asi * float(7.68))
            set_vid2905()

        end if

        print_asi(0x05, 0x06, 0x01, 0xFF, 0xFF, dword(asi))

    end if    

end loop
